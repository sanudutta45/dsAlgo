#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int value){
        data = value;
        next = NULL;
    }
};

class CircularQueue {
    private:
    int totalSize;
    int currentSize;
    Node* head;
    Node* tail;
    
    public:
    
    CircularQueue(int size) {
        totalSize = size;
        head = tail = nullptr;
        currentSize = 0;
    }

    bool isFull(){
        return currentSize == totalSize;
    }
    
    bool isEmpty(){
        return currentSize == 0;
    }
    void enqueue(int value){
        Node* temp = new Node(value);
        temp->next = head;
        if(isEmpty()){
            head = tail = temp;
        }
        else if(!isFull()){
            tail->next = temp;
            tail = temp;
        }
        currentSize++;
    }
    
    int dequeue() {
        if(isEmpty()) return -1;
        
        Node* temp = head;
        int value = temp->data;
        head = head->next;
        tail->next = head;
        delete temp;
        return value;
    }
    
    void print(){
        Node* temp = head;
        do{
            cout<<temp->data<<" ";
            temp = temp->next;
        }while(temp != head);
    }
    
    int peek() {
        return head->data;
    }
    
};

int main()
{
    CircularQueue cqueue(5);
    cqueue.enqueue(10);
    cqueue.enqueue(20);
    cqueue.enqueue(30);
    cqueue.enqueue(40);
    cqueue.enqueue(50);
    cqueue.enqueue(60);
    cqueue.print();
    cout<<endl<<cqueue.peek()<<endl;
    cout<<cqueue.dequeue()<<endl;
    cout<<cqueue.dequeue()<<endl;
    cout<<cqueue.dequeue()<<endl;
    cqueue.print();
    return 0;
}
