#include <iostream>

using namespace std;

struct Node{
    int data;
    Node* next;
    Node* prev;
};

Node* createNode(int data){
    Node* newNode = new Node();
    
    newNode->data = data;
    
    newNode->next = newNode->prev = NULL;
    
    return newNode;
}

Node* InsertNode(Node* head,int data){
    if(head == NULL) head = createNode(data);
    
    else{
        head->next = InsertNode(head->next,data);
        head->next->prev = head;
    }
    
    return head;
    
}


int countNodes(Node * head){
    int count = 0;
    Node * temp = head;
    while(temp){
        temp = temp->next;
        count++;
    }
    return count;
}


Node* sortedListToBSTRecur(Node **head, int n){
    if( n <= 0) return NULL;
    
    Node* left = sortedListToBSTRecur(head, n/2);
    
    Node *root = *head;
    
    root->prev = left;
    
    *head = (*head)->next;
    
    root->next = sortedListToBSTRecur(head, n-n/2-1);
    
    return root;
}

Node* sortedListToBST(Node *head_ref){
    int n = countNodes(head_ref);
    return sortedListToBSTRecur(&head_ref, n);
    
    // return head;
}

void displayDLL(Node* root){
    if(root == NULL) return;
    
    cout<<root->data<<" ";
    displayDLL(root->next);
}

void LDR(Node* root){
    if(root == NULL) return;
    
    
    LDR(root->prev);
    cout<<root->data<<" ";
    LDR(root->next);
}

int main()
{
    Node* head = NULL;
    
    head = InsertNode(head,1);
    head = InsertNode(head,2);
    head = InsertNode(head,3);
    head = InsertNode(head,4);
    head = InsertNode(head,5);
    head = InsertNode(head,6);
    
    Node* root=sortedListToBST(head);
    


    LDR(root);
    
    return 0;
}
