class MinHeap {
  constructor() {
    this.heap = []
  }

  insert(value) {
    this.heap.push(value)
    this.bubbleUp()
  }

  getParentIndex(i) {
    return Math.floor((i - 1) / 2)
  }

  getLeftChildIndex(i) {
    return i * 2 + 1
  }

  getRightChildIndex(i) {
    return i * 2 + 2
  }

  swap(i, j) {
    ;[this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]]
  }

  bubbleUp() {
    let index = this.heap.length - 1

    while (index > 0) {
      const parentIndex = this.getParentIndex(index)
      if (this.heap[parentIndex] <= this.heap[index]) break
      this.swap(parentIndex, index)
      index = parentIndex
    }
  }

  extractMin() {
    if (this.heap.length === 0) return null
    if (this.heap.length === 1) return this.heap.pop()

    const min = this.heap[0]
    this.heap[0] = this.heap.pop()
    this.bubbleDowm()
    return min
  }

  bubbleDowm() {
    let index = 0
    const length = this.heap.length

    while (true) {
      let left = this.getLeftChildIndex(index)
      let right = this.getRightChildIndex(index)
      let smallest = index

      if (left < length && this.heap[left] < this.heap[smallest]) {
        smallest = left
      }
      if (right < length && this.heap[right] < this.heap[smallest]) {
        smallest = right
      }

      if (smallest === index) break

      this.swap(index, smallest)
      index = smallest
    }
  }
}

const minHeap = new MinHeap()
minHeap.insert(10)
minHeap.insert(2)
minHeap.insert(8)
minHeap.insert(6)
minHeap.insert(11)
minHeap.insert(15)

console.log(minHeap.extractMin())

console.log(minHeap.heap)
