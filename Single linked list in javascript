class Node {
    constructor(value) {
        this.value = value
        this.next = null
    }
}

class NodeList {
    constructor() {
        this.head = null
        this.length = 0
    }
    
    // add element at the start of the list
    addStart(value) {
        const newNode = new Node(value)
        newNode.next = this.head
        this.head = newNode
        this.length++
    }
    
    // add element at the end of the list
    addEnd(value) {
        if(!this.head) {
            addStart(value)
            return
        }
        const newNode = new Node(value)
        let refHead = this.head
        while(refHead.next) {
            refHead = refHead.next
        }
        
        refHead.next = newNode
        this.length++
    }
    
    // get last nth node
    findLastNthNode(nth) {
        let firstRef, secondRef
        firstRef = this.head
        secondRef = this.head
        let distance = 0
        
        while(distance < nth) {
            distance+=1
            secondRef = secondRef.next
        }
        
        while(secondRef) {
            secondRef = secondRef.next
            firstRef = firstRef.next
        }
        return firstRef.value
    }
    
    // remove duplicate in a sorted list
    removeDuplicates() {
        let currentRef = this.head
        
        while(currentRef) {
            if (currentRef.next && currentRef.value == currentRef.next.value) {
                currentRef.next = currentRef.next.next
            }
            currentRef = currentRef.next
        }
    }
    
    // insert in a sorted list
    insertInSorted(value) {
        
        const newNode = new Node(value)

        let currentRef = this.head
        let tempRef = null
        while(currentRef && currentRef.value < value) {
            tempRef = currentRef
            currentRef = currentRef.next
        }
        
        newNode.next = currentRef
        if(tempRef) tempRef.next = newNode
    }
    
    // remove based on value
    removeByValue(value) {
        let currentRef = this.head
        let tempRef = null
        while(currentRef && currentRef.value != value) {
            tempRef = currentRef
            currentRef = currentRef.next
        }
        
        if(!currentRef) return
        tempRef.next = currentRef.next
        
    }
    
    // create a loop at an index
    createLoop(pos) {
        let count = 0
        let currentRef = this.head
        let temp = null
        while(currentRef.next) {
            count+=1
            if(pos == count) {
                temp = currentRef
            }
        currentRef = currentRef.next
        }
        currentRef.next = temp
    }
    
    // get start node of the loop
    getStartNodeLoop(slowPtr) {
      let temp = this.head
      while(slowPtr != temp) {
        slowPtr = slowPtr.next
        temp = temp.next
      }
      return temp.value
    }
    
    // remove loop
    removeLoop(slowPtr) {
      let temp = this.head
      while(slowPtr.next != temp.next) {
        slowPtr = slowPtr.next
        temp = temp.next
      }
      
      slowPtr.next = null
    }
    
    
    // detect loop
    detectLoop() {
        let fastPtr = this.head
        let slowPtr = this.head
        
        while(fastPtr && fastPtr.next) {
            fastPtr = fastPtr.next.next
            slowPtr = slowPtr.next
            if(fastPtr == slowPtr){
                // return this.getStartNodeLoop(slowPtr)
                this.removeLoop(slowPtr)
                return
            }
        }
        return null
    }
    
    // print values
    printValues() {
        let refHead = this.head
        while(refHead) {
            console.log(refHead.value)
            refHead = refHead.next
        }
    }
}

const linkedList = new NodeList()

linkedList.addStart(8)
linkedList.addStart(7)
linkedList.addStart(6)
linkedList.addStart(5)
linkedList.addStart(4)
linkedList.addStart(2)
linkedList.addStart(1)


linkedList.printValues()

linkedList.insertInSorted(3)

linkedList.createLoop(3)

const isLoop = linkedList.detectLoop()

// linkedList.removeByValue(4)
console.log("Found Loop: ")	
linkedList.printValues()



			
