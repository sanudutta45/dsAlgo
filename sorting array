#include <iostream>

using namespace std;

void swap(int *firstNumber, int *secondNumber){
    int temp = *firstNumber;
    *firstNumber = temp;
    *secondNumber = *firstNumber;
}

// selection sorting
void selectionSort(int arr[],int size){
    int minValue_id;
    for(int i=0;i<size-1;i++){
        minValue_id = i;
        for(int j=i+1;j<size;j++){
            if(arr[j]<arr[minValue_id])
                minValue_id = j;
        }
        swap(arr[i],arr[minValue_id]);
    }
}

void bubbleSort(int arr[],int n){
 for(int k=0; k< n; k++){
     bool flag = true;
    for(int i=0;i<n-k-1;i++){
        if(arr[i] > arr[i+1]){
            int temp = arr[i];
            arr[i] = arr[i+1];
            arr[i+1] = temp;
            flag = false;
        }
    }
    if(flag == true) break;
  }
}

void insertionSort(int arr[],int n){
    for(int i=1; i<n; i++){
        int value = arr[i];
        int hole = i;
        while(hole>0 && arr[hole-1] > value){
            arr[hole] = arr[hole-1];
            hole = hole-1;
        }
        arr[hole] = value;
        
    }
}

void merge(int arr[], int l, int m, int r){
    
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1];
    int R[n2];
    
    for(int i=0;i<n1;i++) L[i] = arr[i + l];
    for(int j=0;j<n2;j++) R[j] = arr[j + m + 1];
    
    int i = 0;
    int j = 0;
    int k = l;
    
    while(i<n1 && j<n2){
        if(L[i] <= R[j]){
            arr[k] = L[i];
            i++;
        }
        else{
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    while(i<n1){
        arr[k] = L[i];
        i++;
        k++;
    }
    
    while(j<n2){
        arr[k] = R[j];
        j++;
        k++;
    }
    
}

void mergeSort(int arr[],int l,int r){

    if(l>=r) return;
    
    int mid = l + (r-l)/ 2;
    
   
    mergeSort(arr,l,mid);
    mergeSort(arr,mid+1,r);
    
    merge(arr,l,mid,r);
    
}

int partition(int arr[],int l, int r){
    int pivot = arr[r];
    int pIndex = l;
    
    for(int i=l;i<r;i++){
        if(arr[i]<=pivot){
            swap(arr[i],arr[pIndex]);
            pIndex++;
        }
    }
    
    swap(arr[pIndex],arr[r]);
    
    return pIndex;
    
}

void quickSort(int arr[],int l,int r){
    if(l>=r) return;
    
    int pivotIndex = partition(arr,l,r);
    
    quickSort(arr,l,pivotIndex-1);
    quickSort(arr,pivotIndex+1,r);
}

void printArr(int arr[],int n){
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}


int main()
{
    int arr[] = {4,2,7,12,43,23,13,1};
    int n = sizeof(arr)/sizeof(int);
    
    // selectionSort(arr,n);
    // bubbleSort(arr,n);
    // insertionSort(arr,n);
    // mergeSort(arr,0,n-1);
    quickSort(arr,0,n-1);
    printArr(arr,n);
    
    return 0;
}
