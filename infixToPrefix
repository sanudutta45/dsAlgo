/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<string>
#include<stack>
using namespace std;

bool isOper(char oper) {
    switch(oper){
        case '^':
        case '*':
        case '/':
        case '+':
        case '-': return true;
        break;
        default: return false;
        break;
    }
}

int precedence(char oper) {
    if(oper == '^') return 3;
    else if(oper == '*' || oper == '/') return 2;
    else if(oper == '+' || oper == '-') return 1;
    else return -1;
}

bool isHighPrec(char oper1, char oper2) {
    return precedence(oper1) >= precedence(oper2);
}

string infixToPostfix(string expr){
    stack<char> operStack;
    string postExp;
    
    char currentChar;
    
    for(int i=0; i<expr.length(); i++){
        currentChar = expr[i];
        if(isOper(currentChar) && operStack.empty()) 
            operStack.push(currentChar);
        else if(isOper(currentChar)) {
            while(!operStack.empty() && isHighPrec(operStack.top(),currentChar)) {
                postExp += operStack.top();
                operStack.pop();
            }
            operStack.push(currentChar);
        }
        else if(currentChar == '(') operStack.push(currentChar);
        else if(currentChar == ')') {
            while(operStack.top() != '(' && !operStack.empty()) {
                postExp += operStack.top();
                operStack.pop();
            }
            
            operStack.pop();
        }
        else postExp += currentChar;
        
    }
    
    while(!operStack.empty()) {
        postExp += operStack.top();
        operStack.pop();
    }
    
    return postExp;
}

string infixToPrefix(string expr) {
    stack<char> operStack;
    string prefixExp;
    
    for(int i=expr.length() - 1; i >=0; i--) {
        char currentChar = expr[i];
        
        if(isOper(currentChar) && operStack.empty()) {
            operStack.push(currentChar);
        }
        else if(isOper(currentChar)) {
           while(!operStack.empty() && isHighPrec(operStack.top(),currentChar)) {
               prefixExp += operStack.top();
               operStack.pop();
           }
           operStack.push(currentChar);
        }
        else if(currentChar == ')') operStack.push(')');
        else if(currentChar == '(') {
            while(!operStack.empty() && operStack.top() != ')') {
                prefixExp += operStack.top();
                operStack.pop();
            }
            operStack.pop();
        }
        else {
            prefixExp+= currentChar;
        }
    }
    
    while(!operStack.empty()) {
        prefixExp += operStack.top();
        operStack.pop();
    }
    
    return prefixExp;
}

int main()
{
    string infixExp;
    
    cout<<"Enter an infix expression: ";
    getline(cin,infixExp);
    string postExp = infixToPostfix(infixExp);
    string prefixExp = infixToPrefix(infixExp);
    cout<<"Post fix expression: "<<postExp<<endl;
    cout<<"Prefix expression: ";
    for(int i=prefixExp.length() - 1;i>=0;i--){
        cout<<prefixExp[i];
    }

    return 0;
}
